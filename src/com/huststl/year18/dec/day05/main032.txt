[LeetCode] Longest Valid Parentheses 最长有效括号


Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed)

 parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()",

 which has length = 4.



这道求最长有效括号比之前那道 Valid Parentheses 验证括号难度要大一些，这里我们还是借助栈来求解，

需要定义个start变量来记录合法括号串的起始位置，我们遍历字符串，如果遇到左括号，则将当前下标压入栈，

如果遇到右括号，如果当前栈为空，则将下一个坐标位置记录到start，如果栈不为空，则将栈顶元素取出，

此时若栈为空，则更新结果和i - start + 1中的较大值，否则更新结果和i - 栈顶元素中的较大值，

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为
"()"

思路：加入辅助数组，左括号直接进栈，辅助数组对应编号置0，右括号进看前面是否有配对，

有左括号配对，将前面的左括号出栈，将当前右和左括号在辅助数组中对应位置置1，最后看连续的1的最大数返回。