[LeetCode] String to Integer (atoi) 字符串转为整数


Implement atoi to convert a string to an integer.

Hint: Carefully consider all possible input cases. If you want a challenge,

please do not see below and ask yourself what are the possible input cases.

Notes: It is intended for this problem to be specified vaguely

(ie, no given input specs). You are responsible to gather all the input requirements up front.


解题思路：

字符串转为整数是很常用的一个函数，由于输入的是字符串

1. 若字符串开头是空格，则跳过所有空格，到第一个非空格字符，如果没有，则返回0.

2. 若第一个非空格字符是符号+/-，则标记sign的真假，这道题还有个局限性，那就是在c++里面，+-1和-+1都是认可的，都是-1，而在此题里，则会返回0.

3. 若下一个字符不是数字，则返回0. 完全不考虑小数点和自然数的情况，不过这样也好，起码省事了不少。

4. 如果下一个字符是数字，则转为整形存下来，若接下来再有非数字出现，则返回目前的结果。

5. 还需要考虑边界问题，如果超过了整形数的范围，则用边界值替代当前值。

当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

若函数不能执行有效的转换，返回 0。

说明：

假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。如果数值超过可表示的范围，则返回 INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: “42”
输出: 42
示例 2:

输入: ” -42”
输出: -42
解释: 第一个非空白字符为 ‘-‘, 它是一个负号。
我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: “4193 with words”
输出: 4193
解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。
示例 4:

输入: “words and 987”
输出: 0
解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。
因此无法执行有效的转换。
示例 5:

输入: “-91283472332”
输出: -2147483648
解释: 数字 “-91283472332” 超过 32 位有符号整数范围。
因此返回 INT_MIN (−231) 。

思路
这个题目即需要自己实现一个字符串解析整数的功能方法，根据以上示例可以得出三个结论

在没有遇到数字或正负号之前，只能出现空格否则不能转换。

遇到数字或者正负号之后在遇见空格或者其他字符（包括正负号）转换停止之后的数字不在转换。

转化的值可能会超出int范围，一旦转化的当前整数值超出int范围，停止转化。

知道这些特征之后就很好解决问题了，直接通过循环判断对应的条件然后做出相应的操作即可

